<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
      https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop 
      https://www.springframework.org/schema/aop/spring-aop.xsd">
      
      <!--
		데이터베이스 연결정보가 정의된 db.properties 파일을 읽어오는
		PropertyPlaceholderConfigurer을 스프링의 빈으로 등록시킨다.
		
		스프링설정파일 혹은 java코드에서 ${} 표현식으로 db.properties 파일에 
		설정된 값을 사용할 수 있다.
	  -->
      <context:property-placeholder 
		location="classpath:/context/db.properties"/>
      <!--
		Connection Pool 객체를 스프링 컨테이너의 빈으로 등록시키기
		+ 데이터베이스 엑세스 작업에 필요한 Connection을 제공하는 객체다.
		+ 데이터베이스와 미리 연결된 Connection을 생성해서 관리한다.
		
		public class DriverManagerDataSource .... {
			private String driverClassName;
			private String url;
			private String username;
			private String password;
			
			setter 메소드
		}
	  -->
   	<bean id="connectionPool" 
   		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
   		<property name="driverClassName" value="${db.driver-class-name}" />
   		<property name="url" 			 value="${db.url}" />
   		<property name="username" 		 value="${db.username}" />
   		<property name="password" 		 value="${db.password}" />
   	</bean>
   	
   	<!--
		JdbcTemplate 객체를 스프링 컨테이너의 빈으로 등록시키기
		+ JdbcTemplate은 데이터베이스 엑세스 작업에 필요한 대부분의 작업이 미리 구현되어 있는 객체다.
		+ JdbcTemplate이 제공하는 메소드를 활용하면 커넥션 획득, PreparedStatement 획득, ?에 값 바인딩,
		  SQL 실행, 리소스 해제 등의 작업을 구현할 필요가 없다.
		  
		+ JdbcTemplate은 데이터베이스와 연결된 Connection이 획득하기 위해서
		  ConnectionPool 객체에 의존한다.
	-->
	<bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
   		<property name="dataSource" ref="connectionPool" />
    </bean>
    
    <context:component-scan base-package="jdbc.dao" />
    
</beans>